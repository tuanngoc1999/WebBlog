'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Blog")>  _
Partial Public Class dbBlogDataContextDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertADMIN(instance As ADMIN)
    End Sub
  Partial Private Sub UpdateADMIN(instance As ADMIN)
    End Sub
  Partial Private Sub DeleteADMIN(instance As ADMIN)
    End Sub
  Partial Private Sub InsertCHUDE(instance As CHUDE)
    End Sub
  Partial Private Sub UpdateCHUDE(instance As CHUDE)
    End Sub
  Partial Private Sub DeleteCHUDE(instance As CHUDE)
    End Sub
  Partial Private Sub InsertTACGIA(instance As TACGIA)
    End Sub
  Partial Private Sub UpdateTACGIA(instance As TACGIA)
    End Sub
  Partial Private Sub DeleteTACGIA(instance As TACGIA)
    End Sub
  Partial Private Sub InsertTIN(instance As TIN)
    End Sub
  Partial Private Sub UpdateTIN(instance As TIN)
    End Sub
  Partial Private Sub DeleteTIN(instance As TIN)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("BlogConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property ADMINs() As System.Data.Linq.Table(Of ADMIN)
		Get
			Return Me.GetTable(Of ADMIN)
		End Get
	End Property
	
	Public ReadOnly Property CHUDEs() As System.Data.Linq.Table(Of CHUDE)
		Get
			Return Me.GetTable(Of CHUDE)
		End Get
	End Property
	
	Public ReadOnly Property TACGIAs() As System.Data.Linq.Table(Of TACGIA)
		Get
			Return Me.GetTable(Of TACGIA)
		End Get
	End Property
	
	Public ReadOnly Property TINs() As System.Data.Linq.Table(Of TIN)
		Get
			Return Me.GetTable(Of TIN)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ADMIN")>  _
Partial Public Class ADMIN
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MAADMIN As String
	
	Private _TENTAIKHOAN As String
	
	Private _MATKHAU As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMAADMINChanging(value As String)
    End Sub
    Partial Private Sub OnMAADMINChanged()
    End Sub
    Partial Private Sub OnTENTAIKHOANChanging(value As String)
    End Sub
    Partial Private Sub OnTENTAIKHOANChanged()
    End Sub
    Partial Private Sub OnMATKHAUChanging(value As String)
    End Sub
    Partial Private Sub OnMATKHAUChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MAADMIN", DbType:="Char(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property MAADMIN() As String
		Get
			Return Me._MAADMIN
		End Get
		Set
			If (String.Equals(Me._MAADMIN, value) = false) Then
				Me.OnMAADMINChanging(value)
				Me.SendPropertyChanging
				Me._MAADMIN = value
				Me.SendPropertyChanged("MAADMIN")
				Me.OnMAADMINChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TENTAIKHOAN", DbType:="Char(30)")>  _
	Public Property TENTAIKHOAN() As String
		Get
			Return Me._TENTAIKHOAN
		End Get
		Set
			If (String.Equals(Me._TENTAIKHOAN, value) = false) Then
				Me.OnTENTAIKHOANChanging(value)
				Me.SendPropertyChanging
				Me._TENTAIKHOAN = value
				Me.SendPropertyChanged("TENTAIKHOAN")
				Me.OnTENTAIKHOANChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MATKHAU", DbType:="Char(30)")>  _
	Public Property MATKHAU() As String
		Get
			Return Me._MATKHAU
		End Get
		Set
			If (String.Equals(Me._MATKHAU, value) = false) Then
				Me.OnMATKHAUChanging(value)
				Me.SendPropertyChanging
				Me._MATKHAU = value
				Me.SendPropertyChanged("MATKHAU")
				Me.OnMATKHAUChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CHUDE")>  _
Partial Public Class CHUDE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MACHUDE As String
	
	Private _TENCHUDE As String
	
	Private _TINs As EntitySet(Of TIN)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMACHUDEChanging(value As String)
    End Sub
    Partial Private Sub OnMACHUDEChanged()
    End Sub
    Partial Private Sub OnTENCHUDEChanging(value As String)
    End Sub
    Partial Private Sub OnTENCHUDEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TINs = New EntitySet(Of TIN)(AddressOf Me.attach_TINs, AddressOf Me.detach_TINs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MACHUDE", DbType:="Char(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property MACHUDE() As String
		Get
			Return Me._MACHUDE
		End Get
		Set
			If (String.Equals(Me._MACHUDE, value) = false) Then
				Me.OnMACHUDEChanging(value)
				Me.SendPropertyChanging
				Me._MACHUDE = value
				Me.SendPropertyChanged("MACHUDE")
				Me.OnMACHUDEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TENCHUDE", DbType:="NVarChar(50)")>  _
	Public Property TENCHUDE() As String
		Get
			Return Me._TENCHUDE
		End Get
		Set
			If (String.Equals(Me._TENCHUDE, value) = false) Then
				Me.OnTENCHUDEChanging(value)
				Me.SendPropertyChanging
				Me._TENCHUDE = value
				Me.SendPropertyChanged("TENCHUDE")
				Me.OnTENCHUDEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CHUDE_TIN", Storage:="_TINs", ThisKey:="MACHUDE", OtherKey:="MACHUDE")>  _
	Public Property TINs() As EntitySet(Of TIN)
		Get
			Return Me._TINs
		End Get
		Set
			Me._TINs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TINs(ByVal entity As TIN)
		Me.SendPropertyChanging
		entity.CHUDE = Me
	End Sub
	
	Private Sub detach_TINs(ByVal entity As TIN)
		Me.SendPropertyChanging
		entity.CHUDE = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TACGIA")>  _
Partial Public Class TACGIA
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MATACGIA As String
	
	Private _TENTAGIA As String
	
	Private _TINs As EntitySet(Of TIN)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMATACGIAChanging(value As String)
    End Sub
    Partial Private Sub OnMATACGIAChanged()
    End Sub
    Partial Private Sub OnTENTAGIAChanging(value As String)
    End Sub
    Partial Private Sub OnTENTAGIAChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TINs = New EntitySet(Of TIN)(AddressOf Me.attach_TINs, AddressOf Me.detach_TINs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MATACGIA", DbType:="Char(30) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property MATACGIA() As String
		Get
			Return Me._MATACGIA
		End Get
		Set
			If (String.Equals(Me._MATACGIA, value) = false) Then
				Me.OnMATACGIAChanging(value)
				Me.SendPropertyChanging
				Me._MATACGIA = value
				Me.SendPropertyChanged("MATACGIA")
				Me.OnMATACGIAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TENTAGIA", DbType:="NVarChar(50)")>  _
	Public Property TENTAGIA() As String
		Get
			Return Me._TENTAGIA
		End Get
		Set
			If (String.Equals(Me._TENTAGIA, value) = false) Then
				Me.OnTENTAGIAChanging(value)
				Me.SendPropertyChanging
				Me._TENTAGIA = value
				Me.SendPropertyChanged("TENTAGIA")
				Me.OnTENTAGIAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TACGIA_TIN", Storage:="_TINs", ThisKey:="MATACGIA", OtherKey:="MATACGIA")>  _
	Public Property TINs() As EntitySet(Of TIN)
		Get
			Return Me._TINs
		End Get
		Set
			Me._TINs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TINs(ByVal entity As TIN)
		Me.SendPropertyChanging
		entity.TACGIA = Me
	End Sub
	
	Private Sub detach_TINs(ByVal entity As TIN)
		Me.SendPropertyChanging
		entity.TACGIA = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TIN")>  _
Partial Public Class TIN
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MATIN As String
	
	Private _TENTIN As String
	
	Private _MOTA As String
	
	Private _NGAYDANG As System.Nullable(Of Date)
	
	Private _MATACGIA As String
	
	Private _MACHUDE As String
	
	Private _CHUDE As EntityRef(Of CHUDE)
	
	Private _TACGIA As EntityRef(Of TACGIA)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMATINChanging(value As String)
    End Sub
    Partial Private Sub OnMATINChanged()
    End Sub
    Partial Private Sub OnTENTINChanging(value As String)
    End Sub
    Partial Private Sub OnTENTINChanged()
    End Sub
    Partial Private Sub OnMOTAChanging(value As String)
    End Sub
    Partial Private Sub OnMOTAChanged()
    End Sub
    Partial Private Sub OnNGAYDANGChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnNGAYDANGChanged()
    End Sub
    Partial Private Sub OnMATACGIAChanging(value As String)
    End Sub
    Partial Private Sub OnMATACGIAChanged()
    End Sub
    Partial Private Sub OnMACHUDEChanging(value As String)
    End Sub
    Partial Private Sub OnMACHUDEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CHUDE = CType(Nothing, EntityRef(Of CHUDE))
		Me._TACGIA = CType(Nothing, EntityRef(Of TACGIA))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MATIN", DbType:="Char(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property MATIN() As String
		Get
			Return Me._MATIN
		End Get
		Set
			If (String.Equals(Me._MATIN, value) = false) Then
				Me.OnMATINChanging(value)
				Me.SendPropertyChanging
				Me._MATIN = value
				Me.SendPropertyChanged("MATIN")
				Me.OnMATINChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TENTIN", DbType:="NVarChar(50)")>  _
	Public Property TENTIN() As String
		Get
			Return Me._TENTIN
		End Get
		Set
			If (String.Equals(Me._TENTIN, value) = false) Then
				Me.OnTENTINChanging(value)
				Me.SendPropertyChanging
				Me._TENTIN = value
				Me.SendPropertyChanged("TENTIN")
				Me.OnTENTINChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MOTA", DbType:="NVarChar(MAX)")>  _
	Public Property MOTA() As String
		Get
			Return Me._MOTA
		End Get
		Set
			If (String.Equals(Me._MOTA, value) = false) Then
				Me.OnMOTAChanging(value)
				Me.SendPropertyChanging
				Me._MOTA = value
				Me.SendPropertyChanged("MOTA")
				Me.OnMOTAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NGAYDANG", DbType:="DateTime")>  _
	Public Property NGAYDANG() As System.Nullable(Of Date)
		Get
			Return Me._NGAYDANG
		End Get
		Set
			If (Me._NGAYDANG.Equals(value) = false) Then
				Me.OnNGAYDANGChanging(value)
				Me.SendPropertyChanging
				Me._NGAYDANG = value
				Me.SendPropertyChanged("NGAYDANG")
				Me.OnNGAYDANGChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MATACGIA", DbType:="Char(30)")>  _
	Public Property MATACGIA() As String
		Get
			Return Me._MATACGIA
		End Get
		Set
			If (String.Equals(Me._MATACGIA, value) = false) Then
				If Me._TACGIA.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMATACGIAChanging(value)
				Me.SendPropertyChanging
				Me._MATACGIA = value
				Me.SendPropertyChanged("MATACGIA")
				Me.OnMATACGIAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MACHUDE", DbType:="Char(10)")>  _
	Public Property MACHUDE() As String
		Get
			Return Me._MACHUDE
		End Get
		Set
			If (String.Equals(Me._MACHUDE, value) = false) Then
				If Me._CHUDE.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMACHUDEChanging(value)
				Me.SendPropertyChanging
				Me._MACHUDE = value
				Me.SendPropertyChanged("MACHUDE")
				Me.OnMACHUDEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CHUDE_TIN", Storage:="_CHUDE", ThisKey:="MACHUDE", OtherKey:="MACHUDE", IsForeignKey:=true)>  _
	Public Property CHUDE() As CHUDE
		Get
			Return Me._CHUDE.Entity
		End Get
		Set
			Dim previousValue As CHUDE = Me._CHUDE.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CHUDE.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CHUDE.Entity = Nothing
					previousValue.TINs.Remove(Me)
				End If
				Me._CHUDE.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TINs.Add(Me)
					Me._MACHUDE = value.MACHUDE
				Else
					Me._MACHUDE = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("CHUDE")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TACGIA_TIN", Storage:="_TACGIA", ThisKey:="MATACGIA", OtherKey:="MATACGIA", IsForeignKey:=true)>  _
	Public Property TACGIA() As TACGIA
		Get
			Return Me._TACGIA.Entity
		End Get
		Set
			Dim previousValue As TACGIA = Me._TACGIA.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TACGIA.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TACGIA.Entity = Nothing
					previousValue.TINs.Remove(Me)
				End If
				Me._TACGIA.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TINs.Add(Me)
					Me._MATACGIA = value.MATACGIA
				Else
					Me._MATACGIA = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("TACGIA")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
